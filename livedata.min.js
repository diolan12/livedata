class LiveData{static version="1.0.0";constructor(t,s=!1){this._valueIsInitialized=void 0!==t,this._value=t,this._nullSafe=s,this._arrOfFn=[],this._arrOfDebouncedFn=[],this._arrOfThrottledFn=[]}static make(t,s=!1){return new this(t,s)}isInitialized(){return this._valueIsInitialized}async notify(){!this._value&&this._nullSafe||this._arrOfFn.forEach((t=>{t(this._value)}))}async notifyDebounce(){!this._value&&this._nullSafe||this._arrOfDebouncedFn.forEach((t=>{t(this._value)}))}async notifyThrottle(){!this._value&&this._nullSafe||this._arrOfThrottledFn.forEach((t=>{t(this._value)}))}async postValue(t){this._value=t,this.notify(),this.notifyDebounce(),this.notifyThrottle(),this._valueIsInitialized=!0}mutateValue(t){return this.postValue(t(this._value)),this}getValue(){return this._value}set value(t){this.postValue(t)}get value(){return this._value}observe(t){this._arrOfFn.push((async s=>{t(s)})),this._valueIsInitialized}observeDebounce(t,s=500){this._arrOfDebouncedFn.push(this._debounce((async s=>{t(s)}),s)),this._valueIsInitialized&&this._debounce((async s=>{t(s)}),s)}observeThrottle(t,s=500){this._arrOfThrottledFn.push(this._throttle((async s=>{t(s)}),s)),this._valueIsInitialized&&this._throttle((async s=>{t(s)}),s)}_debounce(t,s=500){let e;return async function(){const i=this,r=arguments;clearTimeout(e),e=setTimeout((function(){t.apply(i,r)}),s)}}_throttle(t,s=500){let e=!1;return async function(){if(e)return;const i=arguments;t.apply(this,i),e=!0,setTimeout((()=>{e=!1}),s)}}}class ValidatorMap extends Map{constructor(){super()}set(t,s){return s?super.set(t,!0):super.set(t,!1),this}isValid(){return 0!==this.size&&!Array.from(this.values()).includes(!1)}}class LiveValidator extends Map{constructor(t){super(),this._arrOfFn=[],t&&Array.isArray(t)&&t.forEach((t=>this.set(t,!1)))}async notify(){this._arrOfFn.forEach((t=>{t(this.isValid(),this)}))}keys(){return super.keys()}set(t,s){return super.set(t,!!s),this.notify(),this}get(t){return super.get(t)}observe(t){this._arrOfFn.push((async(s,e)=>{t(s,e)}))}isValid(){return 0!==this.size&&!Array.from(this.values()).includes(!1)}}